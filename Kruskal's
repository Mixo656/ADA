#include <stdio.h>

#define MAX 10
#define INF 999

int find(int parent[], int i) {
    while (parent[i] != i)
        i = parent[i];
    return i;
}

void union_sets(int parent[], int u, int v) {
    parent[v] = u;
}

int kruskals(int n, int cost[MAX][MAX]) {
    int mincost = 0, ne = 0;
    int parent[MAX];
    for (int i = 0; i < n; i++)
        parent[i] = i; // Initialize disjoint sets

    while (ne < n - 1) {
        int min = INF, a = -1, b = -1;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (cost[i][j] < min) {
                    min = cost[i][j];
                    a = i;
                    b = j;
                }
            }
        }

        int u = find(parent, a);
        int v = find(parent, b);

        if (u != v) {
            printf("%d) Minimum edge is: (%d, %d) and its cost is: %d\n", ne + 1, a, b, min);
            mincost += min;
            union_sets(parent, u, v);
            ne++;
        }

        cost[a][b] = cost[b][a] = INF; // Mark edge as used
    }

    return mincost;
}

int main() {
    int cost[MAX][MAX], n;

    printf("********* KRUSKAL'S ALGORITHM *********\n");
    printf("Enter the number of nodes: ");
    scanf("%d", &n);

    printf("Enter the cost matrix (%d for no edge):\n", INF);
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &cost[i][j]);

    printf("The entered cost matrix is:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++)
            printf("%d\t", cost[i][j]);
        printf("\n");
    }

    int mincost = kruskals(n, cost);
    printf("The minimum spanning tree cost is: %d\n", mincost);
    printf("***************************************\n");

    return 0;
}
